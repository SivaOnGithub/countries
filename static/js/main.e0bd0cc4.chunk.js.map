{"version":3,"sources":["List/index.js","App.js","serviceWorker.js","index.js"],"names":["List","state","dbCountries","displayCountries","closeModal","countryIndex","handleChange","e","searchText","target","value","toLowerCase","searchResult","filter","c","name","includes","setState","showModal","i","renderCountry","country","index","key","style","padding","margin","border","borderRadius","fontSize","fontWeight","textTransform","capital","region","src","flag","width","height","alt","onClick","textAlign","paddingTop","cursor","renderCurrency","curr","code","symbol","renderModal","countryModal","console","log","display","position","zIndex","overflow","alignContent","className","props","isThemeLight","marginLeft","subregion","demonym","area","gini","nativeName","numericCode","cioc","topLevelDomain","toString","callingCodes","timezones","currencies","map","axios","get","then","d","data","catch","this","type","onChange","placeholder","backgroundColor","React","Component","App","toggle","prevState","toggledTheme","localStorage","setItem","theme","getItem","parTheme","JSON","parse","color","paddingLeft","paddingRight","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.e0bd0cc4.chunk.js","sourcesContent":["import React from 'react';\nimport axios from 'axios';\n\nclass List extends React.Component {\n  state = {\n    dbCountries: [],\n    displayCountries: [],\n    closeModal: true,\n    countryIndex: 0,\n  };\n\n  componentDidMount() {\n    axios\n      .get('https://restcountries.eu/rest/v2/all')\n      .then(d => {\n        this.setState({ dbCountries: d.data, displayCountries: d.data });\n      })\n      .catch(e => console.log(e));\n  }\n\n  handleChange = e => {\n    var searchText = e.target.value.toLowerCase();\n    var searchResult = this.state.dbCountries.filter(c => {\n      return c.name.toLowerCase().includes(searchText);\n    });\n    this.setState({ displayCountries: searchResult });\n  };\n\n  closeModal = e => {\n    this.setState({ closeModal: true });\n  };\n\n  showModal = i => {\n    this.setState({ closeModal: false, countryIndex: i });\n  };\n\n  renderCountry = (country, index) => {\n    return (\n      <div key={country.name} style={{ padding: '10px', margin: '10px', border: '1px solid grey', borderRadius: '5px' }}>\n        <div style={{ margin: '1px', padding: '3px', fontSize: 'larger', fontWeight: 'bold', textTransform: 'uppercase' }}>{country.name}</div>\n        <div style={{ margin: '1px', padding: '3px' }}>{`Captial: ${country.capital || '--'}`}</div>\n        <div style={{ margin: '1px', padding: '3px' }}>{`Region: ${country.region || '--'}`}</div>\n        <div>\n          <img src={country.flag} style={{ width: '125px', height: '75px', margin: '1px', padding: '3px', border: '1px solid grey' }} alt=\"flag\" />\n        </div>\n        <button onClick={() => this.showModal(index)} style={{ textAlign: 'right', paddingTop: '3px', fontSize: 'small', cursor: 'pointer' }}>\n          More Info\n        </button>\n      </div>\n    );\n  };\n\n  renderCurrency = curr => {\n    if (curr) {\n      return (\n        <div key={curr.code}>\n          <span>{`Name: ${curr.name}`}</span>\n          <span>{`Symbol: ${curr.symbol}`}</span>\n        </div>\n      );\n    } else {\n      return;\n    }\n  };\n\n  renderModal = () => {\n    if (!this.state.closeModal) {\n      var countryModal = this.state.displayCountries[this.state.countryIndex];\n      console.log('test', countryModal || '');\n      const style = {\n        display: this.state.closeModal ? 'none' : 'block',\n        position: 'fixed',\n        width: '90vw',\n        height: '80vh',\n        zIndex: 1,\n        border: '1px solid grey',\n        padding: '20px',\n        margin: 'auto',\n        overflow: 'auto',\n        borderRadius: '5px',\n        alignContent: 'center',\n      };\n      return (\n        <div style={style} className={this.props.isThemeLight ? 'light' : 'dark'}>\n          <button style={{ marginLeft: '85%' }} onClick={this.closeModal}>\n            Close\n          </button>\n          <div>\n            <div className=\"modal-header\">\n              <span>Name</span>\n              <span>{countryModal.name}</span>\n            </div>\n            <div className=\"modal-header\">\n              <span>Capital</span>\n              <span>{countryModal.capital}</span>\n            </div>\n            <div className=\"modal-header\">\n              <span>Region</span>\n              <span>{countryModal.region}</span>\n            </div>\n            <div className=\"modal-header\">\n              <span>Sub region</span>\n              <span>{countryModal.subregion}</span>\n            </div>\n            <div className=\"modal-header\">\n              <span>Demonym</span>\n              <span>{countryModal.demonym}</span>\n            </div>\n            <div className=\"modal-header\">\n              <span>Area</span>\n              <span>{countryModal.area}</span>\n            </div>\n            <div className=\"modal-header\">\n              <span>Gini</span>\n              <span>{countryModal.gini}</span>\n            </div>\n            <div className=\"modal-header\">\n              <span>Native name</span>\n              <span>{countryModal.nativeName}</span>\n            </div>\n            <div className=\"modal-header\">\n              <span>Numeric code</span>\n              <span>{countryModal.numericCode}</span>\n            </div>\n            <div className=\"modal-header\">\n              <span>CIOC</span>\n              <span>{countryModal.cioc}</span>\n            </div>\n            <div className=\"modal-header\">\n              <span>Top level domain</span>\n              <span>{countryModal.topLevelDomain.toString()}</span>\n            </div>\n            <div className=\"modal-header\">\n              <span>Calling codes</span>\n              <span>{countryModal.callingCodes.toString()}</span>\n            </div>\n            <div className=\"modal-header\">\n              <span>Time zones</span>\n              <span>{countryModal.timezones.toString()}</span>\n            </div>\n            <div className=\"modal-header\">\n              <span>Currencies</span>\n              {countryModal.currencies.map(this.renderCurrency)}\n            </div>\n            <div className=\"modal-header\">\n              <img alt=\"country-flag\" src={countryModal.flag} style={{ width: '100%' }} />\n            </div>\n          </div>\n        </div>\n      );\n    } else {\n      return null;\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        {this.renderModal()}\n        <div style={{ padding: '30px 10px' }}>\n          <input\n            type=\"text\"\n            onChange={this.handleChange}\n            placeholder=\"Type to search by country names ...\"\n            style={{ width: '90%', margin: '20px', padding: '10px', fontSize: 'larger', borderRadius: '5px', backgroundColor: 'cornsilk' }}\n          />\n          <div className=\"country-grid\">{this.state.displayCountries.map(this.renderCountry)}</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default List;\n","import React from 'react';\n\nimport './App.css';\nimport List from './List';\n\nclass App extends React.Component {\n  state = {\n    isThemeLight: false,\n  }\n\n  componentDidMount() {\n    var theme = localStorage.getItem('isThemeLight');\n    if (typeof theme === 'string') {\n      var parTheme = JSON.parse(theme);\n      if (typeof parTheme === 'boolean') {\n        this.setState({ isThemeLight: parTheme });\n      }\n    }\n  }\n\n  toggle = () => this.setState(prevState => {\n    const toggledTheme = !prevState.isThemeLight;\n    localStorage.setItem('isThemeLight', toggledTheme);\n    return { isThemeLight: toggledTheme };\n  });\n\n  render() {\n  return (\n    <div className={`country-app ${this.state.isThemeLight ? 'light' : 'dark'}`}>\n      <header style={{ height: '5vh', backgroundColor: 'grey', color: 'white', paddingTop: '2vh', paddingLeft: '2vw', paddingRight: '2vw' }}>\n        World Countries\n        <button style={{ marginLeft: '3vw', cursor: 'pointer' }} onClick={this.toggle}>Toggle theme</button>\n      </header>\n      <main>\n        <List isThemeLight={this.state.isThemeLight} />\n      </main>\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}